Redux ðŸ”´ => 

Redux works at the data layer of our web application.

React and Redux is separate library

Redux is used for mananging state. Zustand is also another one.

Redux offers easy debugging

Redux is used with react mostly

Redux is used to for managing data 

1. React-Redux
2. Redux Toolkit

We will not use vallina redux, we will use react-Toolkit and react-redux which is bridge between react and redux.



Making Cart component using redux:

When you press the add button -> It dispatches an action -> Which calls the reducer function -> Which updates/modifies the slice of our redux store -> our slice will be updated (item will get added to the cart) ---> This is writing the data.


How to read the data from cart slice ? 
Suppose you want to read the data from the cart slice and display the data which is read on the header component then -> so you will use Selector and this Selector will give you the data from the cart slice to the header component. 

Subscribing to the store -> Header component has Subscribed to the store (cart slice) it means that the header component is now in sink with the cart slice. Whenever the cart slice store data updates, redux automatically updates the header component.

And we Subscribe using a selector.


{
    actions: {
        addItem, removeItem, clearCart
    },
     
    reducer function for each action
}


for each action we have a reducer function, so we have a reducer function which is mapped to each individual action.




Redux Interview questions:

1. This below code will decrease the performance of the app, because first we are Subscribing to the whole store and then selecting the desire portion we want, i.e. cart.items in this case:

const store = useSelector((store) => store);
const cartItems = store.cart.items;

But, this is the optimize way:

const cartItems = useSelector((store) => store.cart.items);

Always select/Subscribe specific/small portion of the store.

Here, in this case it is Subscribed to only cart item from the store. i.e. only a specific thing


2. While creating appStore the term used here is reducer. Because it is one big reducer for your entire app. And this single big reducer can contain multiple small reducers.
But when we create slice, we write the term reducers, because we create multiple reducers.

A reducer is combination of various small reducers

While exporting we use reducer, which is combination of multiple reducer functions. (in cartslice.js)

and in appstore.js we use term reducer, which is combination of multiple reducer slices.

3. In Vanialla(older) Redux => DON'T MUTATE STATE -> don't direclty modify the state, instead make a copy of the state first and then modify. And returning for mandotory.

const newState = [...state];
newState.items.push(action.payload);
return newState;

But in redux Toolkit we have to MUTATE the STATE

Immer library is used to find difference between original state, mutated state and gives you back the new state i.e. immutable state.

Redux Toolkit uses immer behind the scenes.

We can't write this => state = ["amisha"]; Because by doing this we are not mutating the state, we are just giving out the reference 
i.e. originalState = {items: ["pizza"]}
console.log(state) -> ["pizza"]

state = []; -> local copy
console.log(state) -> [] -> it will just give you an empty array, but the original array of pizza will not get modify, it remains the same.



RTK - either mutate the existing state or return a new state

1. State.item.length = 0; -> originalState = []
2. return {items: [] }; -> this new object[] will be replaced inside originalState = { items: [] }